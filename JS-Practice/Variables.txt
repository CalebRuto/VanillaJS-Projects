Variables:
We can put any type in a variable. 
For example, a variable can at one moment be a string and then store a number:

// no error
let message = "hello";
message = 123456;

Programming languages that allow such things, such as JavaScript, are called 
“dynamically typed”, meaning that there exist data types, but variables are not
bound to any of them.




BigInt:

BigInt type was recently added to the language to represent integers of arbitrary
length.

A BigInt value is created by appending n to the end of an integer:

// the "n" at the end means it's a BigInt
const bigInt = 1234567890123456789012345678901234567890n;





STRINGS (Backticks):

Backticks are “extended functionality” quotes. They allow us to embed variables 
and expressions into a string by wrapping them in ${…}, for example:

let name = "John";

// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!

// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3
The expression inside ${…} is evaluated and the result becomes a part of the 
string. We can put anything in there: a variable like name or an arithmetical 
expression like 1 + 2 or something more complex.

Please note that this can only be done in backticks. Other quotes don’t have this
embedding functionality!





The 'null' value:

let age = null;

In JavaScript, null is not a “reference to a non-existing object” or a 
“null pointer” like in some other languages.

It’s just a special value which represents “nothing”, “empty” or “value unknown”.

The code above states that age is unknown.





Objects and Symbols:
- The object type is special.
- All other types are called “primitive” because their values can contain only a 
single thing (be it a string or a number or whatever). 
In contrast, objects are used to store collections of data and more complex 
entities.
- The symbol type is used to create unique identifiers for objects.




Summary
There are 8 basic data types in JavaScript.

- number: for numbers of any kind: integer or floating-point, integers are limited 
by ±(253-1).
- bigint: is for integer numbers of arbitrary length.
- string: for strings. A string may have zero or more characters, there’s no 
separate single-character type.
- boolean: for true/false.
- null: for unknown values – a standalone type that has a single value null.
- undefined: for unassigned values – a standalone type that has a single value undefined.
- object: for more complex data structures.
- symbol: for unique identifiers.
- The typeof: operator allows us to see which type is stored in a variable.

Two forms: typeof x or typeof(x).
Returns a string with the name of the type, like "string".
For null returns "object" – this is an error in the language, it’s not actually 
an object.
In the next chapters, we’ll concentrate on primitive values and once we’re 
familiar with them, we’ll move on to objects.
